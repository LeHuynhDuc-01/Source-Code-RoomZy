// Generated by view binder compiler. Do not edit!
package com.app.roomzy.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.app.roomzy.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityFilterTheDataBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final Button applyFiltersButton;

  @NonNull
  public final Spinner categorySpinner;

  @NonNull
  public final Button clearFiltersButton;

  @NonNull
  public final Spinner locationSpinner;

  @NonNull
  public final EditText maxPrice;

  @NonNull
  public final EditText minPrice;

  @NonNull
  public final NestedScrollView nestedScroll;

  @NonNull
  public final RadioButton sortAscending;

  @NonNull
  public final RadioButton sortDescending;

  @NonNull
  public final RadioButton sortNew;

  @NonNull
  public final RadioGroup sortOrderGroup;

  private ActivityFilterTheDataBinding(@NonNull CoordinatorLayout rootView,
      @NonNull Button applyFiltersButton, @NonNull Spinner categorySpinner,
      @NonNull Button clearFiltersButton, @NonNull Spinner locationSpinner,
      @NonNull EditText maxPrice, @NonNull EditText minPrice,
      @NonNull NestedScrollView nestedScroll, @NonNull RadioButton sortAscending,
      @NonNull RadioButton sortDescending, @NonNull RadioButton sortNew,
      @NonNull RadioGroup sortOrderGroup) {
    this.rootView = rootView;
    this.applyFiltersButton = applyFiltersButton;
    this.categorySpinner = categorySpinner;
    this.clearFiltersButton = clearFiltersButton;
    this.locationSpinner = locationSpinner;
    this.maxPrice = maxPrice;
    this.minPrice = minPrice;
    this.nestedScroll = nestedScroll;
    this.sortAscending = sortAscending;
    this.sortDescending = sortDescending;
    this.sortNew = sortNew;
    this.sortOrderGroup = sortOrderGroup;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityFilterTheDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityFilterTheDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_filter_the_data, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityFilterTheDataBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.applyFiltersButton;
      Button applyFiltersButton = ViewBindings.findChildViewById(rootView, id);
      if (applyFiltersButton == null) {
        break missingId;
      }

      id = R.id.categorySpinner;
      Spinner categorySpinner = ViewBindings.findChildViewById(rootView, id);
      if (categorySpinner == null) {
        break missingId;
      }

      id = R.id.clearFiltersButton;
      Button clearFiltersButton = ViewBindings.findChildViewById(rootView, id);
      if (clearFiltersButton == null) {
        break missingId;
      }

      id = R.id.locationSpinner;
      Spinner locationSpinner = ViewBindings.findChildViewById(rootView, id);
      if (locationSpinner == null) {
        break missingId;
      }

      id = R.id.maxPrice;
      EditText maxPrice = ViewBindings.findChildViewById(rootView, id);
      if (maxPrice == null) {
        break missingId;
      }

      id = R.id.minPrice;
      EditText minPrice = ViewBindings.findChildViewById(rootView, id);
      if (minPrice == null) {
        break missingId;
      }

      id = R.id.nestedScroll;
      NestedScrollView nestedScroll = ViewBindings.findChildViewById(rootView, id);
      if (nestedScroll == null) {
        break missingId;
      }

      id = R.id.sortAscending;
      RadioButton sortAscending = ViewBindings.findChildViewById(rootView, id);
      if (sortAscending == null) {
        break missingId;
      }

      id = R.id.sortDescending;
      RadioButton sortDescending = ViewBindings.findChildViewById(rootView, id);
      if (sortDescending == null) {
        break missingId;
      }

      id = R.id.sortNew;
      RadioButton sortNew = ViewBindings.findChildViewById(rootView, id);
      if (sortNew == null) {
        break missingId;
      }

      id = R.id.sortOrderGroup;
      RadioGroup sortOrderGroup = ViewBindings.findChildViewById(rootView, id);
      if (sortOrderGroup == null) {
        break missingId;
      }

      return new ActivityFilterTheDataBinding((CoordinatorLayout) rootView, applyFiltersButton,
          categorySpinner, clearFiltersButton, locationSpinner, maxPrice, minPrice, nestedScroll,
          sortAscending, sortDescending, sortNew, sortOrderGroup);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
